#!/usr/bin/env node

const nopt = require('nopt');
const fs = require('fs');
const { Marc } = require('../lib/Marc');

const parsed = nopt(
  {
    parser: ['iso2709', 'marcxml', 'mij'],
    formater: ['text', 'iso2709', 'marcxml', 'json', 'mij'],
    output: String,
    help: Boolean,
  },
  {
    p: '--parser',
    f: '--formater',
    o: '--output',
  },
  process.argv, 2,
);

function usage() {
  // eslint-disable-next-line no-console
  console.log(
    'Usage: Marc -p iso2709|marcxml|mij -f text|iso2709|marcxml|mij -o result file1 file2',
  );
  process.exit(1);
}

if (parsed.help) { usage(); }

parsed.parser = parsed.parser || 'iso2709';
parsed.formater = parsed.formater || 'text';

const output = parsed.output ? fs.createWriteStream(parsed.output)
  : process.stdout;
const consumeFile = (input, callback) => {
  const formaterStream = input
    .pipe(Marc.createStream(parsed.parser, 'Parser'))
    .pipe(Marc.createStream(parsed.formater, 'Formater'));
  formaterStream.on('finish', () => callback());
  formaterStream.pipe(output, { end: false });
};
const files = parsed.argv.remain;
if (files.length === 0) { // Read console
  consumeFile(process.stdin, () => output.end());
} else {
  const next = () => {
    const file = files.shift();
    const input = fs.createReadStream(file);
    if (files.length === 0) {
      consumeFile(input, () => output.end());
    } else {
      consumeFile(input, () => next());
    }
  };
  next();
}
